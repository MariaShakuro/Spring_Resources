
services:


  postgres:
    image: postgres:17.4
    container_name: postgres
    environment:
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
    env_file:
      - .env
    ports:
        - "5432:5432"
    volumes:
        - postgres_data:/var/lib/postgresql/data_1
        - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring_resources_app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${SPRING_DATASOURCE_USERNAME}" ]
      interval: 10s
      timeout: 5s
      retries: 3

  mongodb:
    image: mongo:4.4
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - spring_resources_app-network
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - spring_resources_app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    restart: always
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - spring_resources_app-network

  eureka-server:
    image: eureka-server:latest
    container_name: eureka-server
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    ports:
      - "8761:8761"
    networks:
      - spring_resources_app-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5


  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    restart: always
    volumes:
      - redis-data:/data
    command: [ "redis-server", "--appendonly", "yes" ]
    networks:
      - spring_resources_app-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.2.3
    container_name: keycloak
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_DATABASE: keycloak_db
      DB_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      DB_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: >
      start-dev --http-relative-path /auth
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    volumes:
      - keycloak_data:/opt/keycloak/data
    networks:
      - spring_resources_app-network

  gateway-service:
    image: apigateway:latest
    container_name: gateway-service
    restart: always
    build:
        context: ./gateway-service
        dockerfile: Dockerfile
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    ports:
      - "8086:8086"
    depends_on:
     - eureka-server
    networks:
      - spring_resources_app-network


  driver-service:
    build:
      context: ./driver-service
      dockerfile: Dockerfile
    image: driver-service
    container_name: driver-service
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres:5432/driver_db"
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: "update"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    ports:
      - "8081:8081"
    depends_on:
      - eureka-server
      - gateway-service
      - postgres
      - logstash
      - kafka
    networks:
      - spring_resources_app-network
    deploy:
      resources:
        limits:
          memory: 512mb
          cpus: 0.50

  passenger-service:
    build:
      context: ./passenger-service
      dockerfile: Dockerfile
    image: passenger-service
    container_name: passenger-service
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://postgres:5432/passenger_db"
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: "update"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    ports:
      - "8083:8083"
    depends_on:
      - eureka-server
      - gateway-service
      - logstash
      - postgres
      - kafka
    networks:
      - spring_resources_app-network
    deploy:
      resources:
        limits:
          memory: 512mb
          cpus: 0.50

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    image: payment-service
    container_name: payment-service
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    ports:
      - "8082:8082"
    depends_on:
      - eureka-server
      - gateway-service
      - logstash
    networks:
      - spring_resources_app-network
    deploy:
      resources:
        limits:
          memory: 512mb
          cpus: 0.50


  ride-service:
    build:
      context: ./ride-service
      dockerfile: Dockerfile
    image: ride-service
    container_name: ride-service
    environment:
        SPRING_DATA_MONGODB_URI: "mongodb://mongodb:27017/ride_db"
        SPRING_DATA_MONGODB_DATABASE: ride_db
        SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
        EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-server:8761/eureka/
    ports:
      - "8084:8084"
    depends_on:
      - eureka-server
      - gateway-service
      - mongodb
      - logstash
      - kafka
    networks:
      - spring_resources_app-network
    deploy:
      resources:
        limits:
          memory: 512mb
          cpus: 0.50

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - spring_resources_app-network

  grafana:
    image: grafana/grafana-oss:9.4.3
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: "512m"
          cpus: "0.5"
    networks:
      - spring_resources_app-network

  elasticsearch:
    image: elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - spring_resources_app-network
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: 1.0

  logstash:
    image: logstash:8.11.3
    container_name: logstash
    restart: always
    volumes:
      - ./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "5000:5000"
    depends_on:
      - elasticsearch
    networks:
      - spring_resources_app-network
    deploy:
      resources:
        limits:
          memory: 512mb
          cpus: 0.50

  kibana:
    image: kibana:8.11.3
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - spring_resources_app-network
    deploy:
      resources:
        limits:
          memory: 1gb
          cpus: 0.50

  zipkin:
    image: openzipkin/zipkin:latest
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - spring_resources_app-network
    deploy:
      resources:
        limits:
          cpus: 0.25
          memory: 256m

volumes:
  postgres_data:
  mongodb_data:
  redis-data:
  elasticsearch_data:
  grafana-data:
  keycloak_data:

networks:
  spring_resources_app-network:
    driver: bridge

