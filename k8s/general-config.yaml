apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:17.4
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: database-secret
                  key: postgres-username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-secret
                  key: postgres-password
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-storage
          livenessProbe:
            exec:
              command: [ "pg_isready", "-U", "$(POSTGRES_USER)" ]
            initialDelaySeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-svc
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5432
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:4.4
          ports:
            - containerPort: 27017
          env:
            - name: MONGO_INITDB_ROOT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: database-secret
                  key: mongodb-username
            - name: MONGO_INITDB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-secret
                  key: mongodb-password
          volumeMounts:
            - mountPath: /data/db
              name: mongodb-storage
          livenessProbe:
            exec:
              command: [ "mongo", "--eval", "db.adminCommand('ping')" ]
            initialDelaySeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: mongodb-storage
          persistentVolumeClaim:
            claimName: mongodb-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-svc
spec:
  selector:
    app: mongodb
  ports:
    - protocol: TCP
      port: 80
      targetPort: 27017
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:latest
          ports:
            - containerPort: 2181
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_TICK_TIME
              value: "2000"
          volumeMounts:
            - mountPath: /var/lib/zookeeper
              name: zookeeper-storage
          livenessProbe:
            exec:
              command: [ "sh", "-c", "echo ruok | nc localhost 2181" ]
            initialDelaySeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: zookeeper-storage
          persistentVolumeClaim:
            claimName: zookeeper-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-svc
spec:
  selector:
    app: zookeeper
  ports:
    - protocol: TCP
      port: 80
      targetPort: 2181
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: confluentinc/cp-kafka:latest
          ports:
            - containerPort: 9092
          env:
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:9093"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
            - name: KAFKA_LOG_RETENTION_HOURS
              value: "168"
          volumeMounts:
            - mountPath: /var/lib/kafka/data
              name: kafka-storage
          livenessProbe:
            exec:
              command: [ "sh", "-c", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092" ]
            initialDelaySeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: kafka-storage
          persistentVolumeClaim:
            claimName: kafka-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-svc
spec:
  selector:
    app: kafka
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9092
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:latest
          ports:
            - containerPort: 6379
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: git
          volumeMounts:
            - mountPath: /data
              name: redis-storage
          livenessProbe:
            exec:
              command: [ "redis-cli", "ping" ]
            initialDelaySeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: redis-svc
spec:
  selector:
    app: redis
  ports:
    - protocol: TCP
      port: 80
      targetPort: 6379
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          ports:
            - containerPort: 9090
          volumeMounts:
            - mountPath: /etc/prometheus
              name: prometheus-storage
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-svc
spec:
  selector:
    app: prometheus
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9090
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana-oss:9.4.3
          ports:
            - containerPort: 3000
          volumeMounts:
            - mountPath: /var/lib/grafana
              name: grafana-storage
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-svc
spec:
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
        - name: elasticsearch
          image: elasticsearch:8.13.4
          ports:
            - containerPort: 9200
          env:
            - name: discovery.type
              value: "single-node"
            - name: xpack.security.enabled
              value: "false"
          volumeMounts:
            - mountPath: /usr/share/elasticsearch/data
              name: elasticsearch-storage
          livenessProbe:
            httpGet:
              path: /
              port: 9200
            initialDelaySeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: elasticsearch-storage
          persistentVolumeClaim:
            claimName: elasticsearch-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-svc
spec:
  selector:
    app: elasticsearch
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9200
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
        - name: logstash
          image: logstash:8.11.3
          ports:
            - containerPort: 5000
          env:
            - name: LOGSTASH_CONFIG_PATH
              value: "/usr/share/logstash/pipeline/logstash.conf"
          volumeMounts:
            - mountPath: /usr/share/logstash/pipeline/logstash.conf
              name: logstash-storage
          livenessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: logstash-storage
          persistentVolumeClaim:
            claimName: logstash-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: logstash-svc
spec:
  selector:
    app: logstash
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kibana-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec:
      containers:
        - name: kibana
          image: kibana:8.11.3
          ports:
            - containerPort: 5601
          env:
            - name: ELASTICSEARCH_HOSTS
              value: "http://elasticsearch:9200"
          volumeMounts:
            - mountPath: /var/lib/kibana
              name: kibana-storage
          livenessProbe:
            httpGet:
              path: /api/status
              port: 5601
            initialDelaySeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: kibana-storage
          persistentVolumeClaim:
            claimName: kibana-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: kibana-svc
spec:
  selector:
    app: kibana
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5601
  type: NodePort
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zipkin-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zipkin
  template:
    metadata:
      labels:
        app: zipkin
    spec:
      containers:
        - name: zipkin
          image: openzipkin/zipkin:latest
          ports:
            - containerPort: 9411
          livenessProbe:
            httpGet:
              path: /
              port: 9411
            initialDelaySeconds: 10
            timeoutSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: zipkin-svc
spec:
  selector:
    app: zipkin
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9411
  type: NodePort
---